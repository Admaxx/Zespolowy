# coding: utf-8

"""
    SimpleCalc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def a_b_op_get(self, a, b, op, **kwargs):  # noqa: E501
        """a_b_op_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_b_op_get(a, b, op, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str a: (required)
        :param str b: (required)
        :param str op: (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_b_op_get_with_http_info(a, b, op, **kwargs)  # noqa: E501
        else:
            (data) = self.a_b_op_get_with_http_info(a, b, op, **kwargs)  # noqa: E501
            return data

    def a_b_op_get_with_http_info(self, a, b, op, **kwargs):  # noqa: E501
        """a_b_op_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_b_op_get_with_http_info(a, b, op, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str a: (required)
        :param str b: (required)
        :param str op: (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['a', 'b', 'op']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_b_op_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'a' is set
        if ('a' not in params or
                params['a'] is None):
            raise ValueError("Missing the required parameter `a` when calling `a_b_op_get`")  # noqa: E501
        # verify the required parameter 'b' is set
        if ('b' not in params or
                params['b'] is None):
            raise ValueError("Missing the required parameter `b` when calling `a_b_op_get`")  # noqa: E501
        # verify the required parameter 'op' is set
        if ('op' not in params or
                params['op'] is None):
            raise ValueError("Missing the required parameter `op` when calling `a_b_op_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'a' in params:
            path_params['a'] = params['a']  # noqa: E501
        if 'b' in params:
            path_params['b'] = params['b']  # noqa: E501
        if 'op' in params:
            path_params['op'] = params['op']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{a}/{b}/{op}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Result',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def root_get(self, **kwargs):  # noqa: E501
        """root_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.root_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str op:
        :param str a:
        :param str b:
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.root_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.root_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def root_get_with_http_info(self, **kwargs):  # noqa: E501
        """root_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.root_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str op:
        :param str a:
        :param str b:
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['op', 'a', 'b']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method root_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
        if 'a' in params:
            query_params.append(('a', params['a']))  # noqa: E501
        if 'b' in params:
            query_params.append(('b', params['b']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Result',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def root_post(self, input, **kwargs):  # noqa: E501
        """root_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.root_post(input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Input input: (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.root_post_with_http_info(input, **kwargs)  # noqa: E501
        else:
            (data) = self.root_post_with_http_info(input, **kwargs)  # noqa: E501
            return data

    def root_post_with_http_info(self, input, **kwargs):  # noqa: E501
        """root_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.root_post_with_http_info(input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Input input: (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method root_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'input' is set
        if ('input' not in params or
                params['input'] is None):
            raise ValueError("Missing the required parameter `input` when calling `root_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input' in params:
            body_params = params['input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Result',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
